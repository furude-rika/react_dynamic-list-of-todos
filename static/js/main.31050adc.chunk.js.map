{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","setId","todos","setTitle","setStatus","toggleChange","userId","className","type","name","placeholder","onChange","event","target","value","map","todo","key","id","classNames","TodoList__item","completed","checked","title","onClick","defaultProps","API_URL","getUserInfo","fetch","then","response","json","result","data","CurrentUser","state","user","setUser","setState","this","props","prevProps","clearUserId","email","phone","React","Component","App","selectedUserId","isCompleted","setUserId","setNewTitle","subtitle","setNewStatus","status","todoId","filter","visibleTodos","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31050adc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  setId,\n  todos,\n  setTitle,\n  setStatus,\n  toggleChange,\n  userId,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <input\n      type=\"text\"\n      name=\"title\"\n      className=\"TodoList__input\"\n      placeholder=\"Enter the title\"\n      onChange={(event) => {\n        setTitle(event.target.value);\n      }}\n    />\n\n    <select\n      name=\"select\"\n      className=\"TodoList__select\"\n      onChange={(event) => {\n        setStatus(event.target.value);\n      }}\n    >\n      <option value=\"\">\n        All todos\n      </option>\n\n      <option value=\"completed\">\n        Complited todos\n      </option>\n\n      <option value=\"active\">\n        Active todos\n      </option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => {\n                  toggleChange(todo.id);\n                }}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames('button', {\n                'TodoList__user-button--selected': userId === todo.userId,\n              })}\n              type=\"button\"\n              onClick={() => {\n                setId(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n    }),\n  ),\n  setId: PropTypes.func.isRequired,\n  setTitle: PropTypes.func.isRequired,\n  setStatus: PropTypes.func.isRequired,\n  toggleChange: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const API_URL = 'https://mate-api.herokuapp.com/';\n\nexport const getTodos = () => fetch(`${API_URL}todos`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(todos => todos.filter(todo => todo.title && todo.userId));\n\nexport const getUserInfo = userId => fetch(`${API_URL}users/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUserInfo } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUserInfo(this.props.userId)\n      .then((user) => {\n        this.setUser(user);\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUserInfo(this.props.userId)\n      .then((user) => {\n        this.setUser(user);\n      });\n  }\n\n  setUser = (user) => {\n    if (user) {\n      this.setState({ user });\n    } else {\n      this.setState({ user: { name: 'No name provided' } });\n    }\n  }\n\n  render() {\n    const { userId, clearUserId } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={() => clearUserId()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    title: '',\n    isCompleted: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  setUserId = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUserId = () => {\n    this.setState({ selectedUserId: '' });\n  }\n\n  setNewTitle = (subtitle) => {\n    this.setState({ title: subtitle });\n  }\n\n  setNewStatus = (status) => {\n    this.setState({ isCompleted: status });\n  }\n\n  toggleChange = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId, title, isCompleted } = this.state;\n    let visibleTodos = todos.filter(todo => todo.title.includes(title));\n\n    if (isCompleted === 'completed') {\n      visibleTodos = visibleTodos.filter(todo => todo.completed === true);\n    }\n\n    if (isCompleted === 'active') {\n      visibleTodos = visibleTodos.filter(todo => todo.completed === false);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={visibleTodos}\n            setId={this.setUserId}\n            setTitle={this.setNewTitle}\n            setStatus={this.setNewStatus}\n            toggleChange={this.toggleChange}\n            userId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}